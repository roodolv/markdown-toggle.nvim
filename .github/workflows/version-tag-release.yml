name: "Generating Version-Tag and Release"

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write

jobs:
  version-tag-release:
    # Triggered only when PRs are merged and PRs have `semver-XX` labels
    if: |
      github.event.pull_request.merged == true &&
      (contains(github.event.pull_request.labels.*.name, 'semver-major') ||
       contains(github.event.pull_request.labels.*.name, 'semver-minor') ||
       contains(github.event.pull_request.labels.*.name, 'semver-patch'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - run: git fetch --prune --unshallow --tags

      - name: Get current version
        id: current_version
        run: |
          VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//' || echo "0.0.0")
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION=$(echo ${{ steps.current_version.outputs.current_version }})

          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)

          if ${{ contains(github.event.pull_request.labels.*.name, 'semver-major') }}; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif ${{ contains(github.event.pull_request.labels.*.name, 'semver-minor') }}; then
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
          elif ${{ contains(github.event.pull_request.labels.*.name, 'semver-patch') }}; then
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          else
            NEW_VERSION=$CURRENT_VERSION
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      # - name: Update version tag
      #   if: steps.new_version.outputs.new_version != steps.current_version.outputs.current_version
      #   run: |
      #     NEW_VERSION=${{ steps.new_version.outputs.new_version }}

      #     git tag "v$NEW_VERSION"
      #     git push origin refs/tags/"v$NEW_VERSION" || {
      #       echo "Failed to push tag v$NEW_VERSION"
      #       exit 1
      #     }

      - name: Get PR description
        id: pr_description
        run: |
          echo "pr_description=$(curl -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            'https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number}}' \
            | jq .body | awk '{if ($0 == "null") print ""; else print}')" >> $GITHUB_OUTPUT

      # This step requires `.github/release.yml`
      - name: Generate release note changes
        id: changes
        run: |
          echo "changes=$(
          curl -X POST \
            -H 'Accept: application/vnd.github.v3+json' \
            -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            https://api.github.com/repos/${{ github.repository }}/releases/generate-notes \
            -d '{
              "tag_name": "v${{ steps.new_version.outputs.new_version }}",
              "previous_tag_name": "v${{ steps.current_version.outputs.current_version }}",
              "target_commitish": "main"
            }' | jq .body
          )" >> $GITHUB_OUTPUT

      - name: Get commits between tags
        id: get_commits
        run: |
          # Get the date of the previous tag
          PREV_TAG_DATE=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/v${{ steps.current_version.outputs.current_version }}" \
            | jq -r '.object.url' \
            | xargs -I {} curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" {} \
            | jq -r '.committer.date')

          # Get commits since the previous tag
          COMMITS=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits?sha=${{ github.sha }}&since=${PREV_TAG_DATE}" \
            | jq -r '.[] | .commit.message' \
            | grep -v '^Merge' || true)  # Added || true to prevent failure if no commits match

          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Categorize changes
        id: categorize
        run: |
          COMMITS="${{ steps.get_commits.outputs.commits }}"

          # Initialize category sections
          REVERTS=""
          PERFS=""
          REFACTOR=""

          while IFS= read -r commit; do
            # Skip empty lines
            [ -z "$commit" ] && continue
            
            # Extract the first line of commit message
            FIRST_LINE=$(echo "$commit" | head -n1)
            
            # Categorize based on prefix
            if [[ "$FIRST_LINE" =~ ^revert[\(\:] ]]; then
              REVERTS="$REVERTS\\\\n- ${FIRST_LINE#revert*: }"
            elif [[ "$FIRST_LINE" =~ ^perf[\(\:] ]]; then
              PERFS="$PERFS\\\\n- ${FIRST_LINE#perf*: }"
            elif [[ "$FIRST_LINE" =~ ^refactor[\(\:] ]]; then
              REFACTOR="$REFACTOR\\\\n- ${FIRST_LINE#refactor*: }"
            fi
          done <<< "$COMMITS"

          # Create formatted output
          FORMATTED_CHANGES=""

          if [ ! -z "$REVERTS" ]; then
            FORMATTED_CHANGES="$FORMATTED_CHANGES\\\\n### Reverts$REVERTS"
          fi

          if [ ! -z "$PERFS" ]; then
            FORMATTED_CHANGES="$FORMATTED_CHANGES\\\\n### Performance Improvements$PERFS"
          fi

          if [ ! -z "$REFACTOR" ]; then
            FORMATTED_CHANGES="$FORMATTED_CHANGES\\\\n### Refactor$REFACTOR"
          fi

          # Escape output for GitHub Actions
          # FORMATTED_CHANGES="${FORMATTED_CHANGES//'%'/'%25'}"
          # FORMATTED_CHANGES="${FORMATTED_CHANGES//$'\n'/'%0A'}"
          # FORMATTED_CHANGES="${FORMATTED_CHANGES//$'\r'/'%0D'}"

          echo "changes=$FORMATTED_CHANGES" >> $GITHUB_OUTPUT

      - name: Create release note body
        id: release_note_body
        run: |
          echo "release_note_body=$(echo \
            ${{ steps.pr_description.outputs.pr_description }} \
            ${{ steps.changes.outputs.changes }} \
            | sed 's/\\"//g' \
            | sed 's/[""]//g' \
            | sed 's/ by @[^ ]* in \(https[^\\ ]*\)/ (\1)/g' \
            | sed 's/\(\\n\\n\*\*Full Changelog\)/${{ steps.categorize.outputs.changes }}\\n\1/g' \
            )" >> $GITHUB_OUTPUT

      - name: Create Release
        run: |
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{ \
              \"tag_name\": \"v${{ steps.new_version.outputs.new_version }}\", \
              \"target_commitish\": \"main\", \
              \"name\": \"v${{ steps.new_version.outputs.new_version }}\", \
              \"body\": \"${{ steps.release_note_body.outputs.release_note_body }}\" \
            }" \
            -w "%{http_code}" \
            -o response_body.txt \
            https://api.github.com/repos/${{ github.repository }}/releases)
            status_code=$(tail -n1 <<< "$response")
            echo "Status Code: $status_code"
            body=$(cat response_body.txt)
            echo "Response Body: $body"
            if [ $status_code -ne 201 ]; then
              echo "Failed to create release"
              exit 1
            fi
